<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.springproject.goodz.user.mapper.UserMapper">

    <resultMap type="Users" id="userMap">
        <id property="userId" column="user_id" javaType="String"/>
        <result property="username" column="username" />
        <result property="nickname" column="nickname" />
        <result property="password" column="password" />
        <result property="birth" column="birth" />
        <result property="phoneNumber" column="phone_number" />
        <result property="profilePictureUrl" column="profile_picture_url" />
        <result property="account" column="account" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="enabled" column="enabled" />
        <collection property="authList" resultMap="authMap" />
    </resultMap>

        
    <resultMap type="UserAuth" id="authMap">
        <result property="authNo" column="auth_no" />
        <result property="userId" column="user_id" />
        <result property="auth" column="auth" />
    </resultMap>

    <resultMap type="ShippingAddress" id="shippingAddressMap">
        <id property="addressNo" column="address_no" />
        <result property="userId" column="user_id" />
        <result property="recipientName" column="recipient_name" />
        <result property="address" column="address" />
        <result property="zipCode" column="zip_code" />
        <result property="phoneNumber" column="phone_number" />
        <result property="isDefault" column="is_default" />
        <result property="type" column="type" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
    </resultMap>

    <!-- 로그인 - username -->
    <select id="login" resultMap="userMap">
        SELECT u.user_id
              ,u.username
              ,u.password
              ,u.birth
              ,u.profile_picture_url
              ,u.account
              ,u.created_at
              ,u.updated_at
              ,1 enabled
              ,auth
        FROM user u LEFT OUTER JOIN user_auth auth ON u.user_id = auth.user_id
        WHERE u.user_id = #{userId}
    </select>


    <!-- 회원 조회 - id -->
    <select id="select" resultMap="userMap">
        SELECT u.user_id
              ,u.username
              ,u.nickname
              ,u.password
              ,u.birth
              ,u.profile_picture_url
              ,u.account
              ,u.created_at
              ,u.updated_at
              ,1 enabled
              ,auth
        FROM user u LEFT OUTER JOIN user_auth auth ON u.user_id = auth.user_id
        WHERE u.user_id = #{userId}
    </select>

    <!-- 회원 가입 -->
    <insert id="join">
        INSERT INTO user (user_id, username, nickname, password, birth, phone_number, profile_picture_url, account )
        VALUES (#{userId}, #{username}, #{nickname}, #{password}, #{birth}, #{phoneNumber}, #{profilePictureUrl}, #{account})
    </insert>

    <!-- 회원 정보 수정 -->
    <update id="update">
        UPDATE user
        <set>
            nickname = #{nickname},
            updated_at = now()
            <if test="phoneNumber != null and phoneNumber != ''">
                ,phone_number = #{phoneNumber}
            </if>
            <if test="profilePictureUrl != null and profilePictureUrl != ''">
                ,profile_picture_url = #{profilePictureUrl}
            </if>
        </set>
        WHERE user_id = #{userId}
    </update>




    <!-- 회원 권한 등록 -->
    <insert id="insertAuth">
        INSERT INTO user_auth( user_id, auth )
        VALUES ( #{userId}, #{auth} )
    </insert>

    <!-- 아이디 찾기 -->
    <select id="findId" resultType="string">
        SELECT user_id
          FROM user
         WHERE phone_number = #{phoneNumber}
           AND username = #{userName}
    </select>

    <!-- 비밀번호 찾기 -->
    <select id="findPw" resultType="Users">
       SELECT *
         FROM user
        WHERE username = #{userName}
          AND birth = #{birth}
          AND user_id = #{userId}
    </select>

     <!-- 비밀번호 변경 -->
    <update id="changePw">
    UPDATE user
       SET password = #{password}
     WHERE user_id  = #{userId}
    </update> 

    <!-- 쿼리 성능 향상을 위한 신규 아이디 중복 체크 쿼리 -->
    <select id="check" resultType="java.lang.Integer">
        <choose>
            <when test="userId != null and nickname != null">
                SELECT COUNT(*)
                FROM user
                WHERE nickname = #{nickname}
                  AND user_id != #{userId}
            </when>
            <when test="userId != null">
                SELECT COUNT(*)
                FROM user
                WHERE user_id = #{userId}
            </when>
            <when test="nickname != null">
                SELECT COUNT(*)
                FROM user
                WHERE nickname = #{nickname}
            </when>
            <otherwise>
                SELECT 0
            </otherwise>
        </choose>
    </select>

<<<<<<< HEAD

    <!-- 주소록 등록하기 -->
    <insert id="insertAddress" parameterType="ShippingAddress">
        INSERT INTO Shippingaddress (
            user_id,
            recipient_name,
            address,
            zip_code,
            phone_number,
            is_default,
            type
        ) VALUES (
            #{userId},
            #{recipientName},
            #{address},
            #{zipCode},
            #{phoneNumber},
            #{isDefault},
            #{type},
        )
    </insert>

=======
>>>>>>> 344971675920ef6ca6cdf5463bb921a504c7e541
    <!-- 유저 아이디의 맞는 배송지 불러오기 -->
    <select id="selectByUserId" resultMap="shippingAddressMap">
        SELECT *
        FROM Shippingaddress
        WHERE user_id = #{userId}
    </select>
</mapper>